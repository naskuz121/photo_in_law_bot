from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import os

main_buttons = [['üì• –û—Ç—Ä–∏–º–∞—Ç–∏ –≥–∞–π–¥', '‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –∫—É—Ä—Å']]
more_button = [['üî• –•–æ—á—É!']]
payment_buttons = [['üí≥ –¢–∞—Ä–∏—Ñ–∏'], ['‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏', '‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è']]
keyboard_main = ReplyKeyboardMarkup(main_buttons, resize_keyboard=True)
keyboard_more = ReplyKeyboardMarkup(more_button, resize_keyboard=True)
keyboard_payment = ReplyKeyboardMarkup(payment_buttons, resize_keyboard=True)

guide_link = "https://drive.google.com/uc?export=download&id=1Tp9DIgYJQHk_8g8NpQwkfga6BOk7penK"
guide_message = (
    "–ü—Ä–∏–≤—ñ—Ç, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ!\n\n"
    f"üéÅ [–°–∫–∞—á–∞—Ç–∏ –≥–∞–π–¥ ¬´–ó–∞—Ö–∏—Å—Ç –∞–≤—Ç–æ—Ä—Å—å–∫–æ–≥–æ –ø—Ä–∞–≤–∞ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞¬ª]({guide_link})\n\n"
    "–¢–∏ –≤–∂–µ –∑—Ä–æ–±–∏–≤ –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫ –¥–æ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ —É —Å–≤–æ—ó—Ö –ø—Ä–∞–≤–∞—Ö.\n"
    "–ê —Ç–µ–ø–µ—Ä ‚Äî –¥–∞–≤–∞–π –ø–æ-—Å–ø—Ä–∞–≤–∂–Ω—å–æ–º—É —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—è, —è–∫ –ó–ê–•–ò–°–¢–ò–¢–ò —Å–µ–±–µ, —Å–≤–æ—ó —Ñ–æ—Ç–æ —ñ —Å–≤–æ—ó –≥—Ä–æ—à—ñ.\n\n"
    "–ó–∞–ø—Ä–æ—à—É—é —Ç–µ–±–µ –Ω–∞ –º—ñ–π –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å ¬´–§–æ—Ç–æ–≥—Ä–∞—Ñ –≤ –∑–∞–∫–æ–Ω—ñ¬ª ‚Äî —Ü–µ —é—Ä–∏–¥–∏—á–Ω–∏–π –∑–∞—Ö–∏—Å—Ç, —è–∫–∏–π –Ω–µ –∑—ñ—Ç—Ä–µ—Ç—å—Å—è —Ñ—ñ–ª—å—Ç—Ä–æ–º.\n\n"
    "–•–æ—á–µ—à –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫—É—Ä—Å –∞–±–æ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –≤–∞—Ä—Ç—ñ—Å—Ç—å —É—á–∞—Å—Ç—ñ?"
)

course_program = "–ü—Ä–æ–≥—Ä–∞–º–∞ –∫—É—Ä—Å—É –§–æ—Ç–æ–≥—Ä–∞—Ñ –≤ –∑–∞–∫–æ–Ω—ñ 1.0\n\n..."

tariffs = "üü¢ –ë–∞–∑–æ–≤–∏–π –ø–∞–∫–µ—Ç ‚Äî 2‚ÄØ500 –≥—Ä–Ω\n..."

payment_reply = "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å ¬´–æ–ø–ª–∞—Ç–∞¬ª —Å—é–¥–∏ üëâ @anastasiia_ful"
question_reply = "–©–æ–± –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è, –ø–∏—à–∏ –º–µ–Ω—ñ —Å—é–¥–∏ üëâ @anastasiia_ful"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:", reply_markup=keyboard_main)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text in ['üì• –û—Ç—Ä–∏–º–∞—Ç–∏ –≥–∞–π–¥', '‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –∫—É—Ä—Å']:
        await update.message.reply_text(guide_message, reply_markup=keyboard_more, parse_mode="Markdown")
    elif text == 'üî• –•–æ—á—É!':
        await update.message.reply_text(course_program, reply_markup=keyboard_payment)
    elif text == 'üí≥ –¢–∞—Ä–∏—Ñ–∏':
        await update.message.reply_text(tariffs)
    elif text == '‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏':
        await update.message.reply_text(payment_reply)
    elif text == '‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è':
        await update.message.reply_text(question_reply)
    else:
        await update.message.reply_text("–û–±–µ—Ä–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—Ä—ñ–∞–Ω—Ç –∑ –º–µ–Ω—é üëá")

app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.run_polling()